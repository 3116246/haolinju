<!DOCTYPE HTML>
<html xmlns:wb="http://open.weibo.com/wb">
<head>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="utf-8">
	<title>Wefafa移动应用平台—登录</title>
	<meta name="keywords" content="企业移动应用平台，移动开发平台，企业移动门户，Wefafa"/>
	<meta name="description" content="登录到Wefafa移动应用平台"/>
  <link rel="stylesheet" type="text/css" href="{{ asset('bundles/fafatimewebase/css/index.css') }}" />
	<link rel="stylesheet" type="text/css" href="{{ asset('bundles/fafatimewebase/css/login.css') }}" />

	<link rel="shortcut icon" href="{{ asset('bundles/fafatimewebase/images/favicon.ico') }}">
	<link href="{{ asset('bundles/fafatimewebase/css/bootstrap.min.css')}}" type="text/css" rel="stylesheet">
	
	<script src="{{ asset('bundles/fafatimewebase/js/jquery.js') }}" type="text/javascript"></script>
	<script src="{{ asset('bundles/fafatimewebase/js/base64.js') }}"></script>
	<script src="{{ asset('bundles/fafatimewebase/js/base.js') }}"></script>
	<script src="http://tjs.sjs.sinajs.cn/open/api/js/wb.js?appkey=981792452" type="text/javascript" charset="utf-8"></script>
	
	<script src="{{ asset('bundles/fafatimewebase/js/bootstrap.js') }}"></script>

</head>
<body>
	{% if error %} 
        <div style="display:none" id="errorMsg">{{ error.message }}</div>
 	{% endif %}
	<div id="page">
	   <div id="header" class="clearfix">
	    	<h1 id="logo">
	    		<a href="{{ path('JustsyBaseBundle_login') }}">
	    		<img id="J_TBLogo" src="https://www.wefafa.com/bundles/fafatimewebase/images/wefafa_logo.png"> </a>
	     </h1>
	   </div>
	   <div id="content">
		    <div class="login">
		      	<div class="login-bg"><!--为广告所在容器指定-->
					       <div id="flash-ad" class="back_image" ></div>
				</div>				
		        <div id="J_LoginBox" class="login-box no-longlogin module-static">
		           	<div class="bd">
			            <div class="wefafa-box"><!--登录的错误信息开始-->
			               	<div style="height:25px;margin-top:-18px;" id="_message" class="msg">
				                <p class="error" style="display:none;"></p>
				               	</div><!--登录的错误信息结束--><!--标准登录框开始-->
						           <div id="J_Static" class="static">
						              	<form id="form1" action="{{ path('JustsyBaseBundle_login_check')}}" method="post">
							                   <div class="field pwd-field">
							        	           <span for="username">Wefafa帐号：</span>
							        	           <a id="registration" class="forget-pw" tabindex="4" href="{{ JS_OPEN_API_URL}}/register/reg" target="_blank"> 免费注册</a>
							        	           <input id="username" class="login-text" tabindex="1" value="{{_user}}" name="_username" maxlength="32" type="text"> 
							                   </div>
									           <div class="field pwd-field">
									           	  <span for="password">登录密码：</span>						           	   
										           <span id="J_StandardPwd">
											         <input id="password" onpaste="return false;" class="login-text" tabindex="2" name="_password" maxlength="20" type="password"> 
										           </span>
									           </div>
									           <div class="label_field_pair">
									             <label style="padding-left:0px;height:100%;">
									                <input id="remember_me" name="_remember_me" checked type="checkbox" style="float:left;">
									                <span style="float:left;margin-left:20px;margin-right:5px;">保持登录</span>
									                <img style="width:15px;height:15px;float:left;margin-top:2px;" title="保持一周内自动登录" src="{{ asset('bundles/fafatimewebase/images/que.jpg') }}">
									                <a href="{{path('JustsyBaseBundle_reg_retrievepwd')}}" style="float:right;">忘记密码</a>
									             </label>
									           </div>
									           <div class="submit" onclick="formCheck()">
										           <span class="buttonClass" id="btnSubmit" tabindex="3" >登　录</span>
									           </div><span id="J_PasswordEditTmp" class="password-edit-tmp"></span>
									    </form>
									     	  <br>
									     	  <!--
									     	  <wb:login-button type="3,2" onlogin="login" title="使用新浪微博帐号登录Wefafa" onlogout="logout">登录按钮</wb:login-button>
									     	  -->
									</div><!--标准登录框结束-->				       
							    </div>
							</div>
						</div>
					</div>
			 	</div>
			</div>
		</div>
	</div>
	{% render "JustsyBaseBundle:Home:footer"%}
</body>
</html>
<script type="text/javascript">
	  var select_status = false;
		$(document).ready(function(){		  
			select_status = readCookie();
			$("#remember_me").eq(0).attr("checked",select_status);			
			var errorMsg = $("#errorMsg");
	    if(errorMsg!=null && errorMsg[0]!=null)
	    {
	    	  if(errorMsg[0].innerHTML.indexOf("password")>1){
	    	  	$("#_message .error").text("登录密码不正确！");
	    	  	$("#_message .error").show();
	    	  }
	    	  else if(errorMsg[0].innerHTML=="Bad credentials")
	    	  {
	    	  	$("#_message .error").text("登录帐号不正确！");
				    $("#_message .error").show();
				    $("#username").focus();
	    	  }
	    }
	    else
	    {
	    	 if (!select_status)
	    	 {	    	
	    	 	 setTimeout(function(){
		    	 	 $("#username").val("");
		    	   $("#password").val("");
		    	   $("#username").focus();
	    	   },1);
	    	 }
	    }
		});
		
		document.cookie= "webim_chat=false";
    
	  function writeCookie(state)
    {
    	 state = state=="checked"?true:false;	 	   
		   var exdate=new Date();
		   exdate.setDate(exdate.getYear() + 1);
		   document.cookie="state=" + state + ";expires="+exdate.toGMTString();
    }
       
   //读取cooke
    function readCookie()
    {
	     var result = false;
	     if (document.cookie.length>0)
	     {
	       var c_start = document.cookie.indexOf("state=")
	       if (c_start >-1)
	       { 
	         c_start = 6;
	         var c_end=document.cookie.indexOf(";",c_start)
	         if (c_end==-1) 
	            c_end = document.cookie.length
	         result = unescape(document.cookie.substring(c_start,c_end));
	         result = result=="true"?true:false; 
	       }
	     }
	     return result;
    }
   
		$("#username").bind("keypress", function(event) {
			 if ($("#username").val()!="" && event.keyCode==13)
			    $("#password").focus();
			 else
			 	  $("#_message .error").hide();
    }); 

		$("#password").bind("keypress", function(event) {
			 if ($("#username").val()!="" && $("#password").val()!="" && event.keyCode==13)
			   formCheck();
			 else
			 	  $("#_message .error").hide();
    });
    
    function formCheck() {
      var username = $("#username");
      var userpwd = $("#password");
      var divmsg = $("#_message");
      var msgerror = divmsg.find(".error");
      //去除空格
      var emain = $("#username").val();
      emain = emain.replace(/ |　/g,"");
      $("#username").val(emain);
      if (IsNullOrEmpty(emain)) {
        msgerror.text("Wefafa帐号不能为空");
        $("#_message .error").show();
        username.focus();
        return false;
      }
      else if (IsNullOrEmpty(userpwd.val())) {
        msgerror.text("登录密码不能为空");
        $("#_message .error").show();
        userpwd.focus();
        return false;
      }
      /*else if (!validateMobilOrEmail(emain))
      {
      	  msgerror.text("Wefafa帐号格式错误");
          $("#_message .error").show();
          username.focus();
          return false;
      }  */   
      if ($("#btnSubmit").text() == "登 录")
      {
      	writeCookie($("#remember_me").eq(0).attr("checked"));    
      	var userAuthMethod = "{{USER_AUTH_METHD}}";   
      	if(userAuthMethod!="" && userAuthMethod=="WefafaMd5Auth" && username.val().toUpperCase().indexOf("ADMIN@")!=0)
      	{
      		userpwd.val( MD5.hexdigest(userpwd.val()).toUpperCase());
      	}	
      	$("#_message .error").hide();
    	  $("#btnSubmit").text("登 录 中...");
        document.getElementById("form1").action="{{ path('JustsyBaseBundle_login_check')}}";
        document.getElementById("form1").submit();
      }
      return false;
    };
    
    $(function () {
      $("#btnSubmit").text("登 录");
      var divmsg = $("#_message");
      var msgerror = divmsg.find(".error");
      if (!IsNullOrEmpty(msgerror.text())) {
        divmsg.show();
      }
      if (IsNullOrEmpty($("#username").val()))
        $("#username").focus();
      else
        $("#password").focus();
    });
    
    function validateMobilOrEmail(mail)
    {
    	var result=false;
      var reg = /^[a-zA-Z0-9]+[a-zA-Z0-9_-]*(\.[a-zA-Z0-9_-]+)*@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)*\.([a-zA-Z]+){2,}$/;
      result = reg.test(mail);
      if(!result)
      {
      	reg = /^1[3|4|5|8][0-9]\d{8}$/;
      	result = reg.test(mail);
      }
      return result;
    }

	var MD5 = (function () {
    /*
     * Configurable variables. You may need to tweak these to be compatible with
     * the server-side, but the defaults work in most cases.
     */
    var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase */
    var b64pad  = ""; /* base-64 pad character. "=" for strict RFC compliance */
    var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode */

    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     */
    var safe_add = function (x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    };

    /*
     * Bitwise rotate a 32-bit number to the left.
     */
    var bit_rol = function (num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    };

    /*
     * Convert a string to an array of little-endian words
     * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
     */
    var str2binl = function (str) {
        var bin = [];
        var mask = (1 << chrsz) - 1;
        for(var i = 0; i < str.length * chrsz; i += chrsz)
        {
            bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (i%32);
        }
        return bin;
    };

    /*
     * Convert an array of little-endian words to a string
     */
    var binl2str = function (bin) {
        var str = "";
        var mask = (1 << chrsz) - 1;
        for(var i = 0; i < bin.length * 32; i += chrsz)
        {
            str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & mask);
        }
        return str;
    };

    /*
     * Convert an array of little-endian words to a hex string.
     */
    var binl2hex = function (binarray) {
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var str = "";
        for(var i = 0; i < binarray.length * 4; i++)
        {
            str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +
                hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
        }
        return str;
    };

    /*
     * Convert an array of little-endian words to a base-64 string
     */
    var binl2b64 = function (binarray) {
        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var str = "";
        var triplet, j;
        for(var i = 0; i < binarray.length * 4; i += 3)
        {
            triplet = (((binarray[i   >> 2] >> 8 * ( i   %4)) & 0xFF) << 16) |
                (((binarray[i+1 >> 2] >> 8 * ((i+1)%4)) & 0xFF) << 8 ) |
                ((binarray[i+2 >> 2] >> 8 * ((i+2)%4)) & 0xFF);
            for(j = 0; j < 4; j++)
            {
                if(i * 8 + j * 6 > binarray.length * 32) { str += b64pad; }
                else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }
            }
        }
        return str;
    };

    /*
     * These functions implement the four basic operations the algorithm uses.
     */
    var md5_cmn = function (q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q),safe_add(x, t)), s),b);
    };

    var md5_ff = function (a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    };

    var md5_gg = function (a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    };

    var md5_hh = function (a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    };

    var md5_ii = function (a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    };

    /*
     * Calculate the MD5 of an array of little-endian words, and a bit length
     */
    var core_md5 = function (x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        var a =  1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d =  271733878;

        var olda, oldb, oldc, oldd;
        for (var i = 0; i < x.length; i += 16)
        {
            olda = a;
            oldb = b;
            oldc = c;
            oldd = d;

            a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
            d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
            b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
            d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
            c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
            d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
            d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

            a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
            d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
            c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
            b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
            a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
            d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
            c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
            d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
            c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
            a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
            d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
            c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
            b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

            a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
            d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
            b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
            d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
            c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
            d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
            c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
            a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
            d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
            b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

            a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
            d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
            c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
            d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
            d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
            a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
            d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
            b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return [a, b, c, d];
    };


    /*
     * Calculate the HMAC-MD5, of a key and some data
     */
    var core_hmac_md5 = function (key, data) {
        var bkey = str2binl(key);
        if(bkey.length > 16) { bkey = core_md5(bkey, key.length * chrsz); }

        var ipad = new Array(16), opad = new Array(16);
        for(var i = 0; i < 16; i++)
        {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }

        var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
        return core_md5(opad.concat(hash), 512 + 128);
    };

    var obj = {
        /*
         * These are the functions you'll usually want to call.
         * They take string arguments and return either hex or base-64 encoded
         * strings.
         */
        hexdigest: function (s) {
            return binl2hex(core_md5(str2binl(s), s.length * chrsz));
        },

        b64digest: function (s) {
            return binl2b64(core_md5(str2binl(s), s.length * chrsz));
        },

        hash: function (s) {
            return binl2str(core_md5(str2binl(s), s.length * chrsz));
        },

        hmac_hexdigest: function (key, data) {
            return binl2hex(core_hmac_md5(key, data));
        },

        hmac_b64digest: function (key, data) {
            return binl2b64(core_hmac_md5(key, data));
        },

        hmac_hash: function (key, data) {
            return binl2str(core_hmac_md5(key, data));
        },

        /*
         * Perform a simple self-test to see if the VM is working
         */
        test: function () {
            return MD5.hexdigest("abc") === "900150983cd24fb0d6963f7d28e17f72";
        }
    };

    return obj;
})();
</script>