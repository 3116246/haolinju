<?phpnamespace Justsy\BaseBundle\Controller;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Justsy\BaseBundle\DataAccess\SysSeq;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\HttpFoundation\Request;use Justsy\BaseBundle\Login\UserSession;use Justsy\BaseBundle\Common\Utils;use Justsy\BaseBundle\Common\DES;use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;use Symfony\Component\Security\Http\Event\InteractiveLoginEvent;class GroupController extends Controller{  public $groups,$circleId,$isCreate,$joinMethod,$gname,$des,$photoPath,$createStaff,$is_create_staff,$group_id;  public $fafa_groupid;  //群组主页  public function indexAction($network_domain, $group_id)  {        $da = $this->get('we_data_access');    $members = array();    $user = $this->get('security.context')->getToken()->getUser();    $login_account=$user->getUsername();    $this->circleId = $user->get_circle_id($network_domain);    $this->groups = $this->getGroupByCircle($this->circleId, $user->getUserName());    $photourl = $this->container->getParameter('FILE_WEBSERVER_URL');    //获取群的信息    $sql = "select * from we_groups where group_id=?";    $ds = $da->GetData("we_groups",$sql,array((string)$group_id));    if ($ds && $ds['we_groups']['recordcount']>0)    {      $this->circleId = $ds['we_groups']['rows'][0]['circle_id'];      $this->joinMethod = $ds['we_groups']['rows'][0]['join_method'];      $this->gname = $ds['we_groups']['rows'][0]['group_name'];      $this->des = $ds['we_groups']['rows'][0]['group_desc'];      $this->createStaff = $ds['we_groups']['rows'][0]['create_staff'];      $photo = $ds['we_groups']['rows'][0]['group_photo_path'];      $this->photoPath = empty($photo) ? '' : $this->container->getParameter('FILE_WEBSERVER_URL').$photo;      //判断是否是该群组的创建者      if($ds['we_groups']['rows'][0]['create_staff']==$login_account)      {      	$this->is_create_staff=1;      }      $this->group_id=$group_id;      $this->fafa_groupid = $ds['we_groups']['rows'][0]['fafa_groupid'];    }    $sql = "select b.login_account,b.nick_name,      concat('".$photourl."',ifnull(b.photo_path_small,'')) as photo_path       from we_group_staff a,we_staff b       where a.login_account=b.login_account and a.group_id=?";    $ds = $da->GetData("groupstaffs",$sql,array((string)$group_id));    if ($ds && $ds['groupstaffs']['recordcount']>0)    {      $members = $ds['groupstaffs']['rows'];    }    //群组所在圈子成员    $circle_id = $user->get_circle_id($network_domain);    $sql = "select a.login_account,a.nick_name,b.fafa_jid from we_circle_staff a       inner join we_staff b on a.login_account=b.login_account where a.circle_id=?       and not exists (select 1 from we_group_staff b where a.login_account=b.login_account and group_id=?)      limit 0,100";    $ds = $da->GetData('we_circle_staff',$sql,array((string)$circle_id,(string)$group_id));    $circle_members = ($ds && $ds['we_circle_staff']['recordcount']>0) ? $ds['we_circle_staff']['rows'] : array();        return $this->render('JustsyBaseBundle:Group:index.html.twig', array(      'curr_network_domain' => $network_domain,      'this' => $this,      'members' => $members,      'groupId' => $group_id,      'view'=>true,      'publish'=>true,      'group_c'=> $user->IsFunctionCreateGroup($network_domain),      'group_s'=>  $user->IsExistsFunction("GROUP_S"),      'circle_members' => json_encode($circle_members)));  }  public function isManager($group_id,$login_account)  {  	$da = $this->get('we_data_access');  	$sql = "select 1 from we_groups where group_id=? and create_staff=?";  	$ds = $da->GetData("we_groups",$sql,array((string)$group_id,(string)$login_account));  	if($ds && count($ds["we_groups"]["rows"])>0) return 1;  	else return 0;  }  //查询圈子内的群组  private function getGroupByCircle($circle_id, $username)   {    $re = null;    $da = $this->get('we_data_access');        $sql = "select * from ( select a.group_id, a.circle_id, a.group_name ,'' applying								from we_groups a, we_circle b, we_group_staff c								where a.circle_id=b.circle_id 								  and a.group_id=c.group_id								  and a.circle_id=? 								  and c.login_account=?								limit 0, 1000 union								select a.group_id, a.circle_id, a.group_name ,'1' applying								from we_groups a, we_circle b, we_apply c								where a.circle_id=b.circle_id 								  and a.group_id=c.recv_id								  and a.circle_id=? 								  and c.account=?								  and c.recv_type='g'								  and c.is_valid='1' ) b order by convert(group_name USING gbk)						";        $params = array();        $params[] = (string) $circle_id;        $params[] = (string) $username;        $params[] = (string) $circle_id;        $params[] = (string) $username;        $ds = $da->GetData("we_groups", $sql, $params);            return $ds["we_groups"]["rows"];  }  //检查群组名称在圈子内是否重名  public function checkGroupNameAction()  {    $request = $this->get('request');    $gname = $request->get('gname');    $circleId = $request->get('circleId');    $da = $this->get('we_data_access');    $sql = "select group_name from we_groups where circle_id=? and group_name=?";    $ds = $da->GetData('we_groups',$sql,array((string)$circleId,(string)$gname));    $result = '';    if ($ds && $ds['we_groups']['recordcount'] > 0)    {      $result = $ds['we_groups']['rows'][0]['group_name'];    }    return new Response($result);  }  //创建群组主页  public function createIndexAction($network_domain)  {    $da = $this->get('we_data_access');    $da_im = $this->get('we_data_access_im');    $user = $this->get('security.context')->getToken()->getUser();    $this->circleId = $user->get_circle_id($network_domain);    $this->groups = $this->getGroupByCircle($this->circleId, $user->getUserName());    $this->isCreate = "1";    $sql = "select count(1) as cnt from we_circle_staff where circle_id=? and login_account!=?";    $ds = $da->GetData('we_staff',$sql,array((string)$this->circleId,(string)$user->getUserName()));    $pages = $ds['we_staff']['rows'][0]['cnt']/8;    //$members = $this->getCircleMembers($this->circleId, $user->getUserName(), 0);    //获取im grouptype    $sql = "select typeid, typename from im_grouptype";    $ds = $da_im->GetData('im_grouptype',$sql);    $grouptype = ($ds && $ds['im_grouptype']['recordcount']>0) ? json_encode($ds['im_grouptype']['rows']) : array();    $IsBeyondCreateGroup;    $CountCreateGroup=0;    $ec=new \Justsy\BaseBundle\Management\EnoParamManager($da,$this->get('logger'));    if($ec->IsBeyondCreateGroup($user->getUserName())){    	$IsBeyondCreateGroup=true;    	$CountCreateGroup=$ec->getCountCreateGroup($user->getUserName());    }    else    	$IsBeyondCreateGroup=false;     return $this->render('JustsyBaseBundle:Group:group_create_new.html.twig',array(      'curr_network_domain' => $network_domain,      'this' => $this,      'pages' => $pages,      'group_c'=> $user->IsFunctionCreateGroup($network_domain),      'group_s'=>  $user->IsExistsFunction("GROUP_S"),      'fileurl'=> $this->container->getParameter('FILE_WEBSERVER_URL'),      'circleId'=>$this->circleId,      'grouptype' => $grouptype,      'pagecount' => $pages,      'IsBeyondCreateGroup'=>$IsBeyondCreateGroup,      'CountCreateGroup'=> $CountCreateGroup));  }  public function savelogoAction(){  	$user = $this->get('security.context')->getToken()->getUser();    $re = array();    $request = $this->get('request');    $session = $this->get('session');    $fileid = '';    $re=array('s'=>1,'m'=>'','fileid'=>'');    try{	    $filename120 = $session->get("avatar_big");	    $session->remove("avatar_big");	    $session->remove("avatar_middle");	    $session->remove("avatar_small");	    if (!empty($filename120)){ 	    	$fileid = Utils::saveFile($filename120,$this->get('doctrine.odm.mongodb.document_manager'));	    	$session->set('group_logo_id',$fileid);	    }	    $re=array('s'=>1,'m'=>'','fileid'=> $fileid);	  }	  catch(\Exception $e)	  {	  	$this->get('logger')->err($e);	  	$re=array('s'=>0,'m'=>'上传失败','fileid'=>'');	  }	  $response = new Response(json_encode($re));    $response->headers->set('Content-Type', 'text/json');    return $response;	  }  //创建群组保存  public function createSaveAction($network_domain)  {    $user = $this->get('security.context')->getToken()->getUser();    $re = array();    $request = $this->get('request');    $invs = $request->get('invs');    $session = $this->get('session');    $da = $this->get('we_data_access');    $da_im = $this->get('we_data_access_im');    $logger = $this->get('logger');    $this->circleId = $request->get('circleId');    $this->isCreate = "0";    $this->groups = $this->getGroupByCircle($this->circleId, $user->getUserName());    $this->joinMethod = $request->get('radjoin');    $this->gname = $request->get('gname');    $this->des = $request->get('des');    $typeid = "discussgroup";// $request->get('classify');    try    {    	//根据typeid取出typename    	/*    	$sql = "select typename from im_grouptype where typeid=?";    	$ds = $da_im->GetData('im_grouptype',$sql,array($typeid));        	$typename='discussgroup';    	if($ds['im_grouptype']["recordcount"]>0){    			$typename=$ds["im_grouptype"]['rows'][0]["typename"];    	}*/    	$typename='discussgroup'; //全部默认为临时组      //注册fafa_group      $sqls = array(); $paras = array();      $fafa_groupid = SysSeq::GetSeqNextValue($da_im,"im_group","groupid");      $sqls[] = "insert into im_group (groupid, groupname, groupclass, groupdesc, creator, add_member_method, accessright)         values (?, ?, ?, ?, ?, ?, 'any')";      $paras[] = array(        (string)$fafa_groupid,        (string)$this->gname,        (string)$typename,        (string)$this->des,        (string)$user->fafa_jid,        (string)$this->joinMethod      );      $sqls[] = "insert into im_groupemployee (employeeid, groupid, employeenick, grouprole) values (?,?,?,'owner')";      $paras[] = array((string)$user->fafa_jid,(string)$fafa_groupid,(string)$user->nick_name);      //跟新群组版本号      $sqls[] = "delete from im_group_version where us=?";      $paras[] = array((string)$user->fafa_jid);      $da_im->ExecSQLs($sqls,$paras);      //保存图标      $fileid = '';      $fileid = $session->get("group_logo_id");      //if (!empty($filename120)) $fileid = Utils::saveFile($filename120,$this->get('doctrine.odm.mongodb.document_manager'));      //保存      $sqls = array(); $paras = array();      $groupId = SysSeq::GetSeqNextValue($da,"we_groups","group_id");      $sqls[] = "insert into we_groups (group_id,circle_id,group_name,group_desc,group_photo_path,        join_method,create_staff,fafa_groupid,create_date, group_class)        values (?,?,?,?,?,?,?,?,now(),?)";      $paras[] = array((string)$groupId,        (string)$this->circleId,        (string)$this->gname,        (string)$this->des,        (string)$fileid,        (string)$this->joinMethod,        (string)$user->getUserName(),        (string)$fafa_groupid,        (string)$typeid);      $sqls[] = "insert into we_group_staff (group_id,login_account) values (?,?)";      $paras[] = array((string)$groupId,(string)$user->getUserName());      $da->ExecSQLs($sqls,$paras);            //变更版本信息      $this->get("logger")->err("------------create group -----------");            $curuser = $this->get('security.context')->getToken()->getUser();      $eno = $curuser->eno;      $verchange = new \Justsy\BaseBundle\Management\VersionChange($da,$this->get("logger"));    	$result = $verchange->SetVersionChange(2,(string)$groupId,$eno);            //创建文档根目录        $docCtl = new \Justsy\BaseBundle\Controller\DocumentMgrController();        $docCtl->setContainer($this->container);        if($docCtl->createDir("g".$groupId,"c".$this->circleId,$this->gname,$this->circleId)>0)        {        	$docCtl->saveShare("g".$groupId,"0",$groupId,"g","w");//将群目录共享给该群组成员        }            $invs = $request->get('invs');      $im_sender = $this->container->getParameter('im_sender');      //给创建者发送创建群组成功出席      Utils::sendImPresence($im_sender,$user->fafa_jid,"creategroup",json_encode(array("groupid"=> $fafa_groupid,"logoid"=>$fileid,"groupname"=> $this->gname)),$this->container,"","",false,Utils::$systemmessage_code);           //给邀请人员发送消息 站内和即时消息       if (!empty($invs))      {        $invs = explode(";",$invs);        $title = "群组消息";        $message = $user->nick_name."邀请你加入了群组：".$this->gname;        foreach($invs as $key => $value)        {          	if (empty($value)) continue;          	$sqls[] = "insert into we_group_staff (group_id,login_account) values (?,?)";      		$paras[] = array((string)$groupId,(string)$value);      		$da->ExecSQLs($sqls,$paras);                	Utils::sendImPresence($im_sender,$fafa_jid,"creategroup",json_encode(array("groupid"=> $fafa_groupid,"logoid"=>$fileid,"groupname"=> $this->gname)),$this->container,"","",false,Utils::$systemmessage_code);                     	Utils::sendImMessage($im_sender,$fafa_jid,$title,$message,$this->container,"",false,Utils::$systemmessage_code,"1");          /*          //群编号,被邀请人帐号,network_domain,fafa_groupid          $encode = DES::encrypt("$groupId,$value,$network_domain,".$fafa_groupid);          $activeurl = $this->generateUrl("JustsyBaseBundle_group_invjoin",array('para'=>$encode), true);          $txt = $this->renderView("JustsyBaseBundle:Group:message.html.twig",            array("ename"=>$user->ename,"realName"=>$user->nick_name,"activeurl"=>$activeurl,'gname'=>$this->gname));          //发送站内消息          $msgId = SysSeq::GetSeqNextValue($da,"we_message","msg_id");          $sql = "insert into we_message(msg_id,sender,recver,title,content,send_date)values(?,?,?,?,?,now())";          $da->ExecSQL($sql,array((int)$msgId,(string)$user->getUserName(),(string)$value,"邀请加入群组",$txt));          //发送即时消息          $fafa_jid = Utils::getJidByAccount($da, $value);          //$this->get("logger")->info(Utils::makeHTMLElementTag('employee',$user->fafa_jid,$user->nick_name));          $message = Utils::makeHTMLElementTag('employee',$user->fafa_jid,$user->nick_name)."邀请您加入群组【".Utils::makeHTMLElementTag('group',$fafa_groupid,$this->gname)."】";	        $buttons = array();	        $buttons[]=array("text"=>"立即加入","code"=>"agree","value"=>"1");	        $buttons[]=array("text"=>"拒绝","code"=>"agree","value"=>"0");	        Utils::sendImMessage($im_sender,$fafa_jid,$title,$message,$this->container,$activeurl."?invite_user=".$user->fafa_jid,Utils::makeBusButton($buttons),false,Utils::$systemmessage_code,"1");        */        }      }            return $this->redirect($this->generateUrl('JustsyBaseBundle_group',array('network_domain'=>$network_domain,'group_id'=>$groupId)));    }    catch(\Exception $e)    {      $logger->err($e);      return $this->render('JustsyBaseBundle:Error:index.html.twig',array('error'=>'创建群组失败！'));    }  }  //查找群组主页  public function searchIndexAction($network_domain)  {    $user = $this->get('security.context')->getToken()->getUser();    $this->circleId = $user->get_circle_id($network_domain);    $this->groups = $this->getGroupByCircle($this->circleId, $user->getUserName());    return $this->render('JustsyBaseBundle:Group:group_search.html.twig',array('curr_network_domain'=>$network_domain,'this'=>$this,'group_c'=> $user->IsFunctionCreateGroup($network_domain),      'group_s'=>  $user->IsExistsFunction("GROUP_S")));	  }  //查找群组结果  public function searchAction($network_domain)  {    $rows = array();    $da = $this->get('we_data_access');    $user = $this->get('security.context')->getToken()->getUser();    $this->circleId = $user->get_circle_id($network_domain);    $groupname = $this->get('request')->request->get('cond');    $sql = "select a.group_id,a.group_name,a.group_desc,b.nick_name,date_format(a.create_date,'%Y年%c月%e日') as create_date,      create_staff,(select count(1) from we_group_staff c where a.group_id=c.group_id and login_account=?) as is_join,      (select max(wcl.post_date) from we_convers_list wcl where wcl.post_to_group=a.group_id) last_post_date      from we_groups a left join we_staff b on a.create_staff=b.login_account      where a.circle_id=? and group_name like concat('%', ?, '%') and a.join_method='0'      order by last_post_date desc";    $sql .= " limit 0, 50 ";    $ds = $da->GetData("we_groups", $sql, array((string)$user->getUsername(),(string)$this->circleId,(string)$groupname));    if ($ds && $ds['we_groups']['recordcount'] > 0)    {      $rows = $ds['we_groups']['rows'];    }    return $this->render('JustsyBaseBundle:Group:result.html.twig',array('rows'=>$rows,'curr_network_domain'=>$network_domain));	  }  //查询会话  public function getGroupConversAction($type, $groupid)  {  	$request=$this->get("request");  	$user = $this->get('security.context')->getToken()->getUser();  	$da = $this->get('we_data_access');    $circleId = $user->get_circle_id($request->get("network_domain"));   	    $endid = $request->get('endid');    $pre450num = $request->get('pre450num');    $pageindex = $request->get('pageindex');    $pagesize  = 45;    $sql = '';    $para = array();    if ($type == 'all')    {      $sql = "select conv_root_id from we_convers_list a where a.conv_id=a.conv_root_id and a.post_to_group=?";      $para[] = (string)$groupid;    }    else if ($type == 'atten')    {      $sql = "select a.conv_root_id         from we_convers_list a, we_staff_atten b        where a.conv_id=a.conv_root_id          and a.login_account=b.atten_id           and b.atten_type='01'          and a.post_to_group=?          and a.post_to_circle=?          and b.login_account=?";      $para[] = (string)$groupid;      $para[] = (string)$circleId;      $para[] = (string)$user->getUsername();    }    else if ($type == 'publish')    {      $sql = "select a.conv_root_id         from we_convers_list a        where a.conv_id=a.conv_root_id          and a.post_to_group=?          and a.post_to_circle=?          and a.login_account=?";      $para[] = (string)$groupid;      $para[] = (string)$circleId;      $para[] = (string)$user->getUsername();    }    if ($pre450num)    {      $sql = "select count(*) c from ($sql limit 0, 450) as _ttt_";      $ds = $da->GetData("we_convers_list", $sql, $para);                $re = array("pre450num" => $ds["we_convers_list"]["rows"][0]["c"]);      $response = new Response(json_encode($re));      $response->headers->set('Content-Type', 'text/json');      return $response;    }    $sql .= " order by post_date desc";    if ($pageindex){}else {$pageindex=1;}    $pagestart = ($pageindex-1)*$pagesize;    $sql .= " limit $pagestart, 100 ";          $sql = " select * from ($sql) as _ttt_ where 1=1 ";    if ($endid)    {      $sql .= " and (0+conv_root_id)<? ";      $para[] = (float)$endid;    }              $sql .= " limit 0, 15 ";    $da = $this->get('we_data_access');    $ds = $da->GetData("we_convers_list", $sql, $para);    //生成html返回    $conv_root_ids = array_map(function($row)    {      return $row["conv_root_id"];    }, $ds["we_convers_list"]["rows"]);        if ($type == 'all' && empty($endid) && count($conv_root_ids) > 0)    {              //更新用户最后读的信息ID      $conv = new \Justsy\BaseBundle\Business\Conv();      $conv->updateLastReadID_Group($da, $user, $groupid, $conv_root_ids[0]);    }        return $this->forward("JustsyBaseBundle:CDisplayArea:getConv", array("conv_root_ids"=>$conv_root_ids,'trend'=> true));  }  public function getGroupConversPcAction($type, $groupid)  {  	$request=$this->get("request");  	$user = $this->get('security.context')->getToken()->getUser();  	$da = $this->get('we_data_access');    $circleId = $user->get_circle_id($request->get("network_domain"));   	    $endid = $request->get('endid');    $pre450num = $request->get('pre450num');    $pageindex = $request->get('pageindex');    $pagesize  = 45;    $sql = '';    $para = array();    if ($type == 'all')    {      $sql = "select conv_root_id from we_convers_list a where a.conv_id=a.conv_root_id and a.post_to_group=?";      $para[] = (string)$groupid;    }    else if ($type == 'atten')    {      $sql = "select a.conv_root_id         from we_convers_list a, we_staff_atten b        where a.conv_id=a.conv_root_id          and a.login_account=b.atten_id           and b.atten_type='01'          and a.post_to_group=?          and a.post_to_circle=?          and b.login_account=?";      $para[] = (string)$groupid;      $para[] = (string)$circleId;      $para[] = (string)$user->getUsername();    }    else if ($type == 'publish')    {      $sql = "select a.conv_root_id         from we_convers_list a        where a.conv_id=a.conv_root_id          and a.post_to_group=?          and a.post_to_circle=?          and a.login_account=?";      $para[] = (string)$groupid;      $para[] = (string)$circleId;      $para[] = (string)$user->getUsername();    }    if ($pre450num)    {      $sql = "select count(*) c from ($sql limit 0, 450) as _ttt_";      $ds = $da->GetData("we_convers_list", $sql, $para);                $re = array("pre450num" => $ds["we_convers_list"]["rows"][0]["c"]);      $response = new Response(json_encode($re));      $response->headers->set('Content-Type', 'text/json');      return $response;    }    $sql .= " order by post_date desc";    if ($pageindex){}else {$pageindex=1;}    $pagestart = ($pageindex-1)*$pagesize;    $sql .= " limit $pagestart, 100 ";          $sql = " select * from ($sql) as _ttt_ where 1=1 ";    if ($endid)    {      $sql .= " and (0+conv_root_id)<? ";      $para[] = (float)$endid;    }              $sql .= " limit 0, 15 ";    $da = $this->get('we_data_access');    $ds = $da->GetData("we_convers_list", $sql, $para);    //生成html返回    $conv_root_ids = array_map(function($row)    {      return $row["conv_root_id"];    }, $ds["we_convers_list"]["rows"]);        if ($type == 'all' && empty($endid) && count($conv_root_ids) > 0)    {              //更新用户最后读的信息ID      $conv = new \Justsy\BaseBundle\Business\Conv();      $conv->updateLastReadID_Group($da, $user, $groupid, $conv_root_ids[0]);    }        return $this->forward("JustsyBaseBundle:CDisplayArea:getConvPc", array("conv_root_ids"=>$conv_root_ids,'trend'=>true));  }  //取得该群未读的数量  public function getUnreadGroupConversNumAction($network_domain)  {  	$request=$this->get("request");  	$user = $this->get('security.context')->getToken()->getUser(); 	  	$circle_id = $user->get_circle_id($network_domain);          $sql = "select b.group_id, count(*) num from we_convers_list a, we_group_staff bwhere a.conv_id=a.conv_root_id    and a.post_to_circle = ?  and b.group_id = a.post_to_group and b.login_account=?  and (0+a.conv_id) > (0+ifnull(b.last_read_id, 0))  and a.login_account<>?group by b.group_id";    $params = array();    $params[] = (string)$circle_id;    $params[] = (string)$user->getUserName();    $params[] = (string)$user->getUserName();        $da = $this->get('we_data_access');    $ds = $da->GetData("we_convers_list", $sql, $params);        $re = $ds["we_convers_list"]["rows"];    $response = new Response(json_encode($re));    $response->headers->set('Content-Type', 'text/json');    return $response;      }    //收到邀请加入群组 $para 群id,加入人员帐号  public function invJoinAction($para)  {    $logger = $this->get('logger');    $user = $this->get('security.context')->getToken()->getUser();    $da = $this->get("we_data_access");    $da_im = $this->get("we_data_access_im");    try    {      $paraArr = explode(",",trim(DES::decrypt($para)));      //检查帐号是否存在      $sql = "select fafa_jid,nick_name from we_staff where login_account=?";      $ds = $da->GetData('we_staff',$sql,array((string)$paraArr[1]));      if (!$ds || $ds['we_staff']['recordcount']==0)      {        return $this->render('JustsyBaseBundle:Error:index.html.twig',array('error'=>'您还没有微发发帐号，请先注册！'));      }      $jid = $ds['we_staff']['rows'][0]['fafa_jid'];      $nick_name = $ds['we_staff']['rows'][0]['nick_name'];      //检查帐号是否已经加入群组      $sql = "select count(1) as cnt from we_group_staff where group_id=? and login_account=?";      $ds = $da->GetData('we_group_staff',$sql,array((string)$paraArr[0],(string)$paraArr[1]));      if ($ds && $ds['we_group_staff']['rows'][0]['cnt']>0)      {        return $this->render('JustsyBaseBundle:Error:index.html.twig',array('error'=>'您已经加入了该群！'));      }    	$request = $this->get("request");    	//判断是同意还是拒绝    	$agree = $request->get("agree");   	    	if( $agree=="0") //拒绝    	{    		  $invite_user = $request->get("invite_user");    		  $im_sender = $this->container->getParameter('im_sender');          $message =  $nick_name.'拒绝了您的群邀请！';          Utils::sendImMessage($im_sender,$invite_user,"群消息",$message,$this->container,"","",true,Utils::$systemmessage_code);    	    return $this->render('JustsyBaseBundle:Error:success.html.twig');    	}			//判断加入群组数是否超过了限制	    $ec=new \Justsy\BaseBundle\Management\EnoParamManager($da,$this->get('logger'));	    if($ec->IsBeyondJoinGroup($paraArr[1])){	    	return $this->render('JustsyBaseBundle:Error:index.html.twig',array('error'=>'您加入的群组数过多，已达到了等级限制。'));	    }	    //判断改圈子成员数是否已满	    if($ec->IsBeyondGroupMembers($paraArr[0])){	    	return $this->render('JustsyBaseBundle:Error:index.html.twig',array('error'=>'抱歉，该群组已满员。'));	    }      $sql = "select fafa_groupid,group_name from we_groups where group_id=?";      $ds = $da->GetData('we_groups',$sql,array((string)$paraArr[0]));      $group_name = $ds['we_groups']['rows'][0]['group_name'];      $fafa_groupid = ($ds && $ds['we_groups']['recordcount']>0) ? $ds['we_groups']['rows'][0]['fafa_groupid'] : '';      $sql = "insert into im_groupemployee (employeeid, groupid, employeenick, grouprole) values (?,?,?,'normal')";      $da_im->ExecSQL($sql,array((string)$jid,(string)$fafa_groupid,(string)$user->nick_name));      //判断群组是否有人      $sql = "select count(1) as cnt from we_group_staff where group_id=?";      $ds = $da->GetData('we_group_staff',$sql,array((string)$paraArr[0]));      if ($ds && $ds['we_group_staff']['rows'][0]['cnt']==0)      {        $sql = "update we_groups set create_staff=? where group_id=?";        $da->ExecSQL($sql,array((string)$paraArr[1],(string)$paraArr[0]));      }      $sql = "insert into we_group_staff (group_id,login_account) values (?,?)";      $da->ExecSQL($sql,array((string)$paraArr[0],(string)$paraArr[1]));      //变更当前用户群组版本号      $sql="delete from im_group_version where us=?";      $params=array($user->fafa_jid);      $da_im->ExecSQL($sql,$params);      //向客户端发送即时通知      $message = Utils::makeHTMLElementTag('employee',$jid,$nick_name)."加入了群组【".Utils::makeHTMLElementTag('group',$fafa_groupid,$group_name)."】";      $this->sendPresenceGroup($fafa_groupid,"group_addmember",$message);            $backurl = $this->generateUrl("JustsyBaseBundle_group",array('group_id'=>$paraArr[0],'network_domain'=>$paraArr[2]));      return $this->render('JustsyBaseBundle:Group:success.html.twig',array('backurl'=>$backurl));    }    catch(\Exception $e)    {      $logger->err($e);      return $this->render('JustsyBaseBundle:Error:index.html.twig',array('error'=>'加入群组失败！'));    }  }  //检查被邀请的帐号是否已经加入本群  public function checkInvMailAction()  {    $mail = $this->get('request')->request->get('mail');    $groupid = $this->get('request')->request->get('groupid');    $da = $this->get('we_data_access');    $sql = "select count(1) as cnt from we_group_staff where group_id=? and login_account=?";    $ds = $da->GetData('we_group_staff',$sql,array((string)$groupid,(string)$mail));    if ($ds && $ds['we_group_staff']['rows'][0]['cnt']>0)    {      return new Response("1");    }    return new Response("0");  }  //获取圈子成员  public function getMemberAction()  {    $rows = array();    $da = $this->get('we_data_access');    $circleId = $this->get('request')->request->get('circleId');    $account = $this->get('request')->request->get('account');    if(empty($account))    	$account=$this->get('security.context')->getToken()->getUser()->getUserName();    $page = $this->get('request')->request->get('page');    $sql = "select count(1) as cnt from we_circle_staff where circle_id=? and login_account!=?";    $ds = $da->GetData('we_staff',$sql,array((string)$circleId,(string)$account));    if ($ds && $ds['we_staff']['rows'][0]['cnt'] > 0)    {      $cnt = $ds['we_staff']['rows'][0]['cnt'];      $page = $page < ceil($cnt/8) ? $page : 0;      $rows['page'] = $page;      $rows['cnt'] = $cnt;      $json = $this->getCircleMembers($circleId, $account, $page*8);      $rows['json'] = $json;    }    else    {      $rows['page'] = 0;      $rows['cnt'] = 0;    }    $response = new Response(json_encode($rows));    $response->headers->set('Content-Type', 'text/json');    return $response;  }  //获取圈子成员  public function getCircleMembers($circleId, $account, $page)  {    $members = array();    $da = $this->get('we_data_access');    $fileurl = $this->container->getParameter('FILE_WEBSERVER_URL');    $sql = "select a.login_account,a.nick_name,fafa_jid,      concat('".$fileurl."',case trim(ifnull(a.photo_path,'')) when '' then null else a.photo_path end) as photo_path      from we_staff a      inner join we_circle_staff b on a.login_account=b.login_account where b.circle_id=?      and a.login_account!=? order by a.login_account limit $page,8";    $ds = $da->GetData('we_staff',$sql,array((string)$circleId,(string)$account));    if ($ds && $ds['we_staff']['recordcount']>0)    {      $members = $ds['we_staff']['rows'];    }    return $members;  }  //添加成员  public function addGroupMemberAction()  {    $acts = $this->get('request')->request->get('acts');    $groupId = $this->get('request')->request->get('groupId');    $invMsg = $this->get('request')->request->get('invMsg');    $gname = $this->get('request')->request->get('gname');    $fafa_groupid = $this->get('request')->request->get('fafa_groupid');    $network_domain = $this->get('request')->request->get('network_domain');    $im_sender = $this->container->getParameter('im_sender');    $da = $this->get('we_data_access');    $user = $this->get('security.context')->getToken()->getUser();    $title = "邀请加入群组";    try    {      $b = true;      foreach($acts as $key => $value)      {        $s = explode(",",$value);        $act = $s[0];        $jid = $s[1];        $encode = DES::encrypt("$groupId,$act,$network_domain,$fafa_groupid");        $activeurl = $this->generateUrl("JustsyBaseBundle_group_invjoin",array('para'=>$encode), true);        $txt = $this->renderView("JustsyBaseBundle:Group:message.html.twig", array(          "ename" => $user->ename,          "realName" => $user->nick_name,          "activeurl" => $activeurl,          "gname" => $gname,          "invMsg" => $invMsg));        $msgId = SysSeq::GetSeqNextValue($da,"we_message","msg_id");        $sqls[] = "insert into we_message(msg_id,sender,recver,title,content,send_date)values(?,?,?,?,?,now())";        $paras[] = array((string)$msgId,(string)$user->getUsername(),(string)$act,(string)$title,(string)$txt);        //发送即时消息        //$message = $user->nick_name."邀请您加入群组【".$gname."】";        $message = Utils::makeHTMLElementTag('employee',$user->fafa_jid,$user->nick_name)."邀请您加入群组【".Utils::makeHTMLElementTag('group',$fafa_groupid,$gname)."】";        $buttons = array();        $buttons[]=array("text"=>"拒绝","code"=>"agree","value"=>"0");        $buttons[]=array("text"=>"立即加入","code"=>"agree","value"=>"1");                $b &= Utils::sendImMessage($user->fafa_jid,$jid,$title,$message,$this->container,$activeurl."?invite_user=".$user->fafa_jid,Utils::makeBusButton($buttons),false,Utils::$systemmessage_code,"1");      }      if ($b)      {        $da->ExecSQLs($sqls,$paras);        return new Response("1");      }      else      {        return new Response("0");      }    }    catch(\Exception $e)    {      $logger = $this->get('logger')->err($e);      return new Response("0");    }  }      public function  applyCancelAction($groupid)  {      $da = $this->get("we_data_access");      $user = $this->get('security.context')->getToken()->getUser();  	      $apply = new \Justsy\BaseBundle\Management\ApplyMgr($da,null);      $apply->SetGroupApplyInvalid($user->GetUserName(),$groupid);      $re = array();      $re["success"] = "1";      $response = new Response(json_encode($re));      $response->headers->set('Content-Type', 'text/json');      return $response;  }  //申请加入群组  public function applyJoinGroupAction()  {    $da = $this->get("we_data_access");    $user = $this->get('security.context')->getToken()->getUser();    $group_id = $this->get('request')->request->get('group_id');    $group_name = $this->get('request')->request->get('group_name');    $create_staff = $this->get('request')->request->get('create_staff');    $network_domain = $this->get('request')->request->get('network_domain');    		//判断加入群组数是否超过了限制    $ec=new \Justsy\BaseBundle\Management\EnoParamManager($da,$this->get('logger'));    if($ec->IsBeyondJoinGroup($user->getUserName())){    	return new Response("-2");    }    //判断改圈子成员数是否已满    if($ec->IsBeyondGroupMembers($group_id)){    	return new Response("-3");    }    //para 群组ID,申请人帐号 DES加密    $para = DES::encrypt($group_id.",".$user->getUserName().",".$network_domain);    $activeurl = $this->generateUrl("JustsyBaseBundle_group_agreejoin",array('para'=>$para),true);    $txt = $this->renderView("JustsyBaseBundle:Group:msg_apply_join.html.twig", array(      "ename" => $user->ename,      "nick_name" => $user->nick_name,      "account" => DES::encrypt($user->getUsername()),      "activeurl" => $activeurl,      "group_name" => $group_name));    //发送站内消息    $msgId = SysSeq::GetSeqNextValue($da,"we_message","msg_id");    $sql = "insert into we_message(msg_id,sender,recver,send_date,title,content)values(?,?,?,now(),?,?)";    $para = array((int)$msgId,(string)$user->getUserName(),(string)$create_staff,"申请加入群组",$txt);    $da->ExecSQL($sql,$para);    //发送即时消息    $im_sender = $this->container->getParameter('im_sender');    $fafa_jid = Utils::getJidByAccount($da, $create_staff);    $message = Utils::makeHTMLElementTag('employee',$user->fafa_jid,$user->nick_name)."申请加入您的群组【".$group_name."】";    $buttons = array();    $buttons[]=array("text"=>"同意","code"=>"agree","value"=>"1");    $buttons[]=array("text"=>"拒绝","code"=>"agree","value"=>"0");    Utils::sendImMessage($user->fafa_jid,$fafa_jid,"申请加入群组",$message,$this->container,$activeurl."?apply_user=".$user->fafa_jid,$buttons,false,Utils::$systemmessage_code,"1");    return new Response("1");  }  //同意加入群组  public function agreeJoinGroupAction($para)  {    $paraArr = explode(",",trim(DES::decrypt($para)));    $da = $this->get("we_data_access");    $da_im = $this->get("we_data_access_im");    //检查帐号是否存在    $sql = "select fafa_jid,nick_name from we_staff where login_account=?";    $ds = $da->GetData('we_staff',$sql,array((string)$paraArr[1]));    if (!$ds || $ds['we_staff']['recordcount']==0)    {      return $this->render('JustsyBaseBundle:Circle:join_err.html.twig',array('error'=>'申请人帐号不存在！'));    }    $jid = $ds['we_staff']['rows'][0]['fafa_jid'];    $nick_name = $ds['we_staff']['rows'][0]['nick_name'];    $sql = "select count(1) as cnt from we_group_staff where group_id=? and login_account=?";    $ds = $da->GetData('we_group_staff',$sql,array((string)$paraArr[0],(string)$paraArr[1]));    if ($ds && $ds['we_group_staff']['rows'][0]['cnt']>0)    {      return $this->render('JustsyBaseBundle:Circle:join_err.html.twig',array('error'=>'申请人已加入该群组！'));    }    else    {      $sql = "select fafa_groupid,group_name from we_groups where group_id=?";      $ds = $da->GetData('we_groups',$sql,array((string)$paraArr[0]));      $fafa_groupid = ($ds && $ds['we_groups']['recordcount']>0) ? $ds['we_groups']['rows'][0]['fafa_groupid'] : '';      $group_name = $ds['we_groups']['rows'][0]['group_name'] ;    	$request = $this->get("request");    	//判断是同意还是拒绝    	$agree = $request->get("agree");    	if( $agree=="0") //拒绝    	{    		  $apply_user = $request->get("apply_user");	    		  $im_sender = $this->container->getParameter('im_sender');          $message =  "【".$group_name.'】管理员拒绝了您的群申请！';          Utils::sendImMessage($im_sender,$apply_user,"群消息",$message,$this->container,"","",true,Utils::$systemmessage_code);    	    return $this->render('JustsyBaseBundle::Error:success.html.twig');    	}             $sql = "insert into im_groupemployee (employeeid, groupid, employeenick, grouprole) values (?,?,?,'normal')";      $da_im->ExecSQL($sql,array((string)$jid,(string)$fafa_groupid,(string)$nick_name));            //判断群组是否有人      $sql = "select count(1) as cnt from we_group_staff where group_id=?";      $ds = $da->GetData('we_group_staff',$sql,array((string)$paraArr[0]));      if ($ds && $ds['we_group_staff']['rows'][0]['cnt']==0)      {        $sql = "update we_groups set create_staff=? where group_id=?";        $da->ExecSQL($sql,array((string)$paraArr[1],(string)$paraArr[0]));      }      $sql = "insert into we_group_staff (group_id,login_account) values (?,?)";      $para = array((string)$paraArr[0],(string)$paraArr[1]);      $da->ExecSQL($sql,$para);      $backurl = $this->generateUrl("JustsyBaseBundle_group", array(        'network_domain' => $paraArr[2],        'group_id' => $paraArr[0]));            $this->get("logger")->err("同意加入群");      //变更版本信息      $curuser = $this->get('security.context')->getToken()->getUser();      $eno = $curuser->eno;      $verchange = new \Justsy\BaseBundle\Management\VersionChange($da,$this->get("logger"));    	$result = $verchange->SetVersionChange(2,(string)$paraArr[0],$eno);    	            //向客户端发送即时通知      $message = Utils::makeHTMLElementTag('employee',$jid,$nick_name)."加入了群组【".Utils::makeHTMLElementTag('group',$fafa_groupid,$group_name)."】";      $this->sendPresenceGroup($fafa_groupid,"group_addmember",$message);           return $this->render('JustsyBaseBundle:Error:success.html.twig',array('backurl'=>$backurl));    }  }  //向指定的群组成员发送出席  public function sendPresenceGroup($groupid,$caption="group_addmember",$msg)  {      	$sql = "select employeeid from im_groupemployee where groupid=?";      	$da_im = $this->get("we_data_access_im");      	$ds = $da_im->GetData("ims",$sql,array((string)$groupid));      	$jidArr = array();      	for($i=0;$i<count($ds["ims"]["rows"]); $i++)      	{      		  $jidArr[]=$ds["ims"]["rows"][$i]["employeeid"];       	}      	if(count($jidArr)>0)      	    Utils::sendImPresence($this->container->getParameter('im_sender'),implode(",",$jidArr),$caption,$msg, $this->container,"","",false,Utils::$systemmessage_code);    }    public function getGroupMembersJid($groupid)  {  	  try{  	    $da = $this->get("we_data_access");  	    $da_im = $this->get("we_data_access_im");  	    $groupMgr=new \Justsy\BaseBundle\Management\GroupMgr($conn,$conn_im);        return $groupMgr->getGroupMembersJid($groupid);      }      catch(\Exception $e)      {      	  return  null;      }  }    /* Deprecated */  //获得群组信息  public function infoAction(Request $request)  {    $groupid = $request->get('id');    $da = $this->get("we_data_access");    $sql = " select group_name,group_desc,group_photo_path,join_method from we_groups where group_id=?";    $table = $da->GetData("group",$sql,array((String)$groupid));    $result;    if ($table && $table["group"]["recordcount"] >0 )    {      $img = $table["group"]["rows"][0]["group_photo_path"];               $result = array("groupname" => $table["group"]["rows"][0]["group_name"],                      "desc" => $table["group"]["rows"][0]["group_desc"],                      "img"  =>  $this->container->getParameter('FILE_WEBSERVER_URL').$img,                      "join_method" => $table["group"]["rows"][0]["join_method"],                      "exist"=>"1");    }    else  	{  		$result = array("exist" => "0" );  	}  	$response = new Response(json_encode($result));  	$response->headers->set('Content-Type', 'text/json');  	return $response;  }    //判断群组是否已经存在  public function checkAction(Request $request)  {     $groupName = $request->get('txtname');     $da = $this->get("we_data_access");     $result;     $table = $da->GetData("group","select group_id from we_groups where group_name=?",array((String)$groupName ));     if ($table && $table["group"]["recordcount"] >0 )       $result = array('exist'=>1);     else       $result = array('exist'=>0);     $response = new Response(json_encode($result));		 $response->headers->set('Content-Type', 'text/json');		 return $response;  }    //添加或修改群组信息  public function updateAction()  {  	 $request = $this->get("request");     $groupid = $request->get("id");     $groupid = $groupid ==null ? 0:(int)$groupid;     $da = $this->get("we_data_access");        $da_im = $this->get("we_data_access_im");        $upfile = $request->files->get("file_upload");     $fileid = "";     //判断是添加还是修改     $table = $da->GetData("group","select group_id from we_groups where group_id=?",array((String)$groupid ));     if ($table && $table["group"]["recordcount"] == 0 )        $groupid = 0;  //groupid=0表示添加群组管理        if ($upfile != null)  //对于上传图片的处理     {       $dm = $this->get('doctrine.odm.mongodb.document_manager');       if ($groupid >0)       {         $table = $da->GetData("group","select group_photo_path from we_groups where group_id=?",array((String)$groupid));         if ($table && $table["group"]["recordcount"] >0 )  //如果用户原来有头像则删除         {            $img = $table["group"]["rows"][0]["group_photo_path"];           if ( $img !=null && $img !="")           {             $doc = $dm->getRepository('JustsyMongoDocBundle:WeDocument')->find($img);             $dm->remove($doc);             $dm->flush();           }         }       }       $doc = new \Justsy\MongoDocBundle\Document\WeDocument();       $doc->setName($upfile->getClientOriginalName());       $doc->setFile($upfile->getPathname());        $dm->persist($doc);       $dm->flush();       $fileid = $doc->getId();       unlink($upfile->getPathname());     }     //对数据的操作     $sqls = "";     $paras = "";         $sqls_im = "";     $paras_im = "";           if ( $groupid == 0)     {        $user = $this->get('security.context')->getToken()->getUser();        $network_domain = $request->get("network_domain");        $group_id = (String)SysSeq::GetSeqNextValue($da,"we_groups","group_id");        $sqls = array        (           "insert into we_groups(group_id,circle_id,group_name,group_desc,group_photo_path,join_method,create_staff,create_date)value(?,?,?,?,?,?,?,now())",           "insert into we_group_staff(group_id,login_account)values(?,?)"         );        $paras = array        (           array((String) $group_id,(String)$user->get_circle_id($network_domain),(String)$request->get("txtname"),(String)$request->get("txtdesc"),                 (String) $fileid == "" ? null:$fileid,(String)$request->get("radjoin"),(String)$user->getUsername()),           array((String)$group_id,(String)$user->getUsername())        );     }     else     {        $sqls = "update we_groups set group_name=?,group_desc=?,group_photo_path=?,join_method=? where group_id=?";        $sqls_im = "update im_group set groupname=?,groupdesc=?,join_method=? where groupid=?";        $paras = array        (           (String)$request->get("txtname"),(String)$request->get("txtdesc"),(String)$fileid == "" ? null:$fileid,           (String)$request->get("radjoin"),(String)$groupid        );        $paras_im = array        (           (String)$request->get("txtname"),(String)$request->get("txtdesc"),(String)$request->get("radjoin"),(String)$groupid        );     }     try     {       if ( $groupid ==0)         $da->ExecSQLs($sqls,$paras);       else       {         $da->ExecSQL($sqls,$paras);         $da_im->ExecSQL($sqls_im,$paras_im);       }       return $this->redirect($this->generateUrl( "JustsyBaseBundle_group"));     }     catch(Exception $e)     {        return $this->render('JustsyBaseBundle:login:index.html.twig', array('name' => 'err'));     }  }  //指定群的最新动态列表。专门为PC端提供  //参数data：由openid,groupid组成  public function trendListForPCAction()  {		  	$res = $this->get("request");		  	$auth = $res->get("authcode"); 		  	$paras= $res->get("data"); 			  if($auth==null || $auth==""){			  	 $this->get("logger")->err("=====pcSyncAction Error：authcode为空！");			  	 return $this->render('JustsyBaseBundle:Group:pcsync_error.html.twig');//$this->redirect($this->generateUrl('JustsyBaseBundle_login'));			  }			  //$paras =  explode(",", trim(DES::decrypt($paras)));			  try{	  				      $auth = trim(DES::decrypt($auth));			      //解密参数串			      $paras =  explode(",", trim(DES::decrypt($paras)));			      //授权码已过期			      $lng = time()-(int)$auth;			      if($lng>30 || $lng<0)			      {			      	 $this->get("logger")->err("=====pcSyncAction Error：授权码已过期！");			      	 return $this->render('JustsyBaseBundle:Group:pcsync_error.html.twig');//$this->redirect($this->generateUrl('JustsyBaseBundle_login'));			      }			  }			  catch(\Exception $e)		  	{		  		$this->get("logger")->err($e);		  		return $this->render('JustsyBaseBundle:Group:pcsync_error.html.twig');//$this->redirect($this->generateUrl('JustsyBaseBundle_login'));		  	}  				  try			  {		      if(count($paras)!=2)		      {		      	 $this->get("logger")->err("=====pcSyncAction Error：参数$paras不正确！");		      	 return $this->render('JustsyBaseBundle:Group:pcsync_error.html.twig');//$this->redirect($this->generateUrl('JustsyBaseBundle_login'));		      }		      $ec = new \Justsy\BaseBundle\Controller\PersonalHomeController();		      $ec->setContainer($this->container);			  	//通过openID获取用户信息		  	  $user = $ec->loadUserByUsername($paras[0]); 		  	  if($user==null){		  	   $this->get("logger")->err("=====pcSyncAction Error：$paras用户信息未找到！");		  	   return $this->render('JustsyBaseBundle:Group:pcsync_error.html.twig');//$this->redirect($this->generateUrl('JustsyBaseBundle_login')); 		  	  }		  	  //登记seesion		  	  $token = new UsernamePasswordToken($user, $user->getPassword(), "secured_area", $user->getRoles());		  	  $this->get("security.context")->setToken($token);		  	  $session = $res->getSession()->set('_security_'.'secured_area',  serialize($token));		  	  $event = new InteractiveLoginEvent($this->get("request"), $token);		  	  $this->get("event_dispatcher")->dispatch("security.interactive_login", $event);		      $photo_url = $this->container->getParameter('FILE_WEBSERVER_URL').$user->photo_path_small;		      $list=array();		      $list["curr_network_domain"]=$user->edomain; 		      $list["account"]=$user->getUsername();		      $list["trend"]=true;			     $da = $this->get("we_data_access");			     $table = $da->GetData("group","select group_id,group_name from we_groups where fafa_groupid=?",array((String)$paras[1] ));			     if ($table && $table["group"]["recordcount"] >0 ){			       $list["groupId"]=$table["group"]["rows"][0]["group_id"];			       $list["groupName"]=$table["group"]["rows"][0]["group_name"];			     }			     else{		         $list["groupId"]=$paras[1];		         $list["groupName"]=$paras[1];		       }      			$list['view']=true;      			$list['publish']=true;      			$list['group_c']=$user->IsFunctionCreateGroup($user->edomain);      			$list['group_s']=$user->IsExistsFunction("GROUP_S");		      return $this->render('JustsyBaseBundle:Group:pcsync.html.twig',$list);		    }		  	catch(\Exception $e)		  	{		  		$this->get("logger")->err($e);		      return $this->render('JustsyBaseBundle:Group:pcsync_error.html.twig');//$this->redirect($this->generateUrl('JustsyBaseBundle_login'));		  	}        	  }    public function quitGroupAction($group_id)  {        $re = array();    $user = $this->get('security.context')->getToken()->getUser();    $request = $this->getRequest();        $da = $this->get('we_data_access');    $sql = "select fafa_groupid,group_name from we_groups where group_id=?";    $ds = $da->GetData('we_groups',$sql,array((string)$group_id));      $fafa_groupid =$ds['we_groups']['rows'][0]['fafa_groupid'];      $group_name = $ds['we_groups']['rows'][0]['group_name'] ;    $sql = "call p_quitgroup(?, ?, 0)";		$params = array();		$params[] = (string)$group_id;		$params[] = (string)$user->getUserName();    $ds = $da->GetData("p_quitgroup", $sql, $params);        if ($ds["p_quitgroup"]["rows"][0]["recode"] == "0")    {      //向客户端发送即时通知      $message = Utils::makeHTMLElementTag('employee',$user->fafa_jid,$user->nick_name)."退出了群组【".Utils::makeHTMLElementTag('group',$fafa_groupid,$group_name)."】";      $this->sendPresenceGroup($fafa_groupid,"group_deletemeber",$message);    	      $re = array('success' => '1');      //变更版本信息      $this->get("logger")->err("quit group");      $eno = $user->eno;      $verchange = new \Justsy\BaseBundle\Management\VersionChange($da,$this->get("logger"));    	$result = $verchange->SetVersionChange(2,$group_id,$eno);          }    else    {      $re = array('success' => '0');      $logger = $this->container->get('logger');      $logger->err("quitGroup Error group_id:".$group_id." msg:".$ds["p_quitgroup"]["rows"][0]["remsg"]);    }    $response = new Response(json_encode($re));    $response->headers->set('Content-Type', 'text/json');    return $response;  }    public function getGroupCardAction()  {    $list = array();    $request = $this->getRequest();    $group_id = $request->get('group_id');        $da = $this->get("we_data_access");        $groupmgr = new \Justsy\BaseBundle\Management\GroupMgr($da,null);    $groupdata = $groupmgr->Get($group_id);    $list["we_groups"] = $groupdata;        return $this->render("JustsyBaseBundle:Group:group_card.html.twig", $list);     }}